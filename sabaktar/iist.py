888
'''
int #бутун сандар болот 8 5 125
float #болчок сандар 8,5  -23,3
str #создор ''  "" тырмакчада жазылат сандар да             
bool # True, False туура же туура эмес
list # [] квадрат коп маалымат сактаса болот                   #set, dict, tuple  типы данные
round() #бул жазылган сандарды тегеректеп койот 5.5555555----- 5
.upper #бардык созду чон тамга менен жазат
.lower #бардык созду кичинекей кылып коет
.capitalize  #баш тамганы чон кылат
.replace("r", "P") #тамгаларды алмаштырып жазып коет
.split #ар бир созду озунчо кылып болуп чыгат тырмакча менен
 len #канча тамгадан турушун чыгарат
 .count #эмнени алса ошону гана санап чыгат
 input() # маалымат алат
 .title  #баш тамгасын чон кылып чыгарат
'''
''' 
     #0,-4   #1,-3      #2,-2     #3,-1
cars = ['bmw', 'kia', 'mers', 'lixiang']
numbers = [888, 222, 767, 114]

cars.append(888) #списоктун акырына кошот
cars.insert(2, 'audi') #списоктун каалаган жерине кошот
cars.extend(numbers) #эки листти чогуу чыгарат расширение
cars[2] = 'mersedes' #листтеги туура эмес текстти озгортуп берет
cars.remove('bmw') #списоктогу элементти очурот элементти аты менен жок кылат
cars.pop(2) #бул элементти местасы менен жок кылат акыркысын жок кылат
cars.count(888) #листте канча элемент бар экенин санап чыгат,листте канча 888 бар экенин санайт
cars.clear() #листти тазалап коет
cars.index('kia') #канчанчы местада экенин чыгарып берет индекс менен
cars.sort() #алфавит боюнча сорттоп коет абвгде
cars.sort(reverse=True) #тескерисинен сорттоп коет едгвба  | ::-1 ушул туру да бар айлантырып 
cars.reverse() #текстти тескерисинен айландырып чыгарат
min(cars) #эн кичинекейин чыгарат
max(cars) #эн чонун чыгарат
sum(cars) #кошуп суммасын чыгарып коет
print(cars[2]) #бизге керек нерсени гана чыгарып берет
cars[1:] бирден баштап баарын алып чыгасын
cars[:] баарын чыгарып берет
cars[::2] каждый экинчи элементти чыгарып берет
len(cars) списокто канча элемент бар экенин санап коет
sorted сорттоп коет принтке жазылат
'''

'''  set-- множества эч качан озгорбойт,бирок ичине кошо алабыз ж.н алып таштайбыз, дубликаттарды чыгарбайт
      set = {'apple', 'banana', 'cherry','orange'}
      list = ['kiwi']                                     @set.update(list)  
set.add('orange')     --- сеттин ичине жаны нерсе киргизуу
set.update(list)      --- сеттин ичине листти кошот аралаштырат
set.remove('banana')  --- сеттин белгиленген нерсени очуруп салат,эгерде туура эмес жазылса ошибка чыгарат
set.discard('banan')  --- бул да очурот, бирок туура эмес жазылса ошибка чыгарбайт
set.pop()             --- бул да очурот бирок каалаганын очуруп салат
set.clear()           --- тазалап берет
is 'apple' in set:    --- элементтин бар экендигин текшерип берет
print("apple bar")
length = len(set)     --- узундугун
print(list(set))      --- башка тип данныйга озгортуу листке
print(tuple(set))     --- таплга озгортуу

x = {'a', 'b', 'c',}
y = {1, 2, 3}
w = x.union(y)                    --- эки сетти кошуп коет аралаштырып
print (w) 
x.update(y)                       --- бул да аралаштырып кошуп коет
x.intersection_update(y)          --- эки сеттеги окшош нерселерди чыгарат, Дубликаттарды гана чыгарат
x.symmetric_difference_update()y  --- окшош эмес нерселерди чыгарат, дубликаттарды чыгарбайт
'''

'''
dict-- словарь только ключ менен иштейбиз
empty_dict = {}                       --- пустой словарь, dict
person = {'name': Alex, 'age': 30, 'is_student': False} словарь
person['name'] = 'Asan'               --- озгортуу,,,словарьда озгортуу учун ключун колдонобуз
print(person['name'], person['age'])  --- ключу менен чыгарып берет тандаган нерсени
print(person.keys())                  --- базадагы ключторду чыгарып берет ошого карап иштесе болот
print(person.values())                --- ключтун маанисин чыгарып берет
del person['name']                    --- удалить кылуу ключу жазылат ключ менен удалить кылуу
person['last_name'] = 'kubatbekov'    --- элемент кошуу, биринчи ключ жазылат анан мааниси

team = {  бул словарьдын ичинде словарь
        "player1": {'name': 'John', 'position': 'forward'},
        "player2": {'name': 'Alex', 'position': 'goalkeeper'}
}
print(team['player2']['position'])  экинчи игроктун позициясын чыгаруу

'''

''' цикл айлануу
numbers = [3, 5, 6, 55, 77, 88, 765]
for переменный любой in numbers
print(переменный)

for p in reversed(numbers):    ---  тескерисинен чыгарып берет
for p in range(3):             --- range канчаны жазсан ошончо жолу кайталайт
for p in range(1, 10, 2)       --- 1ден 10го чейин 2шаг аттап санап берет
for p in enumarate             --- индекси менен чыгарат
'''



         # База Данных
'''
Select - чыгарып беруу, printке окшош маалыматты экранга чыгарып берет

Аты Столбец (ы)
SELECT * from Customers       * --- баарын чыгарып берип коет
SELECT name, age from Customers --- бул ичиндеги аты менен жашын чыгарып берет 


Insert - кошуу, база данныхка маалымат кошуу

Insert into Таблицанын аты(customer_id, first_name, last_name, age, country)
values(6, 'bektur', 'sadykov', 11, 'kyrgyzstan')                       ушинтип база данныхка кошсо болот 
эгерде бироо эмес кобуроок кошо турган болсок анда астына эле:
values(7, 'sultan', 'jorobekov', 13, 'uzbekistan') 
values(8, 'билал', 'акматов', 10, 'kazakhstan')      ушинтип кошуп кете беребиз каалаганча


Update - озгортуу

Update Таблицанынаты
set = 44
where first_name = 'Bektur'      эгерде аты Бектур болсо анда жашын 44 озгорт
where customer_id = 1            айдиси 1ге барабар болсо

Delete - удалить кылуу

Delete from Таблицанынаты
where Customer_id = 5    эгерде ID номери 5болсо ошону удалить кыл


select * from Customers
where age > 22    таблицанын ичиндеги жашы 22 чондорду чыгар

select * from Customers
where age > 22 and country = 'USA'  эгерде жашы 22 чон болсо жана мамлекети америка болсо чыгар
and -- эгерде эки шарт туура келсе гана баары чыгат  эки шарт туура келсе гана чыгарат
or -- же дегени жашы 22 чон болсо же жашаган жери америка болсо чыгат  эки шарттын бироосу туура келсе чыга берет

Select max(age) from Customers - база данныхтан жашы эн чонун табуу
Select min(age) from Customers - бул эн кичинекейин табуу
Select sum(age) from Customers - бул таблицанын ичиндеги баарынын жаштарын кошуп коет
Select count(age) from Customers - бул количествосун чыгарып берип коет
Select avg(age) from Customers  - бул орто жашын таап берет  AVG
Select avg(age) as озортотургантекст from Customers - бул жазылган нерсеге озгортуп коет

        Like -- бул поиск
Select * from Customers
where last_name like 'R%'       бул таблицанын ичиндеги баш тамгасы R башталганды чыгарат
where last_name like 'R_______' бул Rден кийин 7тамгалууну чыгар дегени
where last_name like '_O%' бул экинчи тамгасы о болсо чыгар дегени узундугу чексиз бул %


      in -- бул ичинде барбы же жокбу деген сыяктуу
Select * from Customers
where country in ('USA', 'UK', 'KG')    ушул мамлекеттерде жашагандарды чыгар дегени
distinct  -- бул уникалный команда


   group -- бул группага болуп коет
select country, count(first_name) from Customers
group by country              бул мамлекеттери менен группага болуп койду америкадан 2 дубай 1 деп count бул санап берет

    order by -- сортировка кылат
select * from Customers
order by age      бул ошондо  жашы менен сортировка кылып коет кичинекейинен чонуна карай
order by age Desc  бул обратно чонунан кичинекейине сортировка кылып коет


int --     бул база данныхта -1млндон +1млнго чейинки сандар #4
smallint -- бул аз сандагы сандарды колдонгондо колдонобуз   #2
bigint   -- бул чон сандар менен иштегенде колдонобуз        #6  миллиарддар
decimal  -- бул болчок сандар

char(20)    -- ичине канча жазсак ошончо местаны занят кылып салат  ALI_________________
varchar(20) -- бул ичине канча нерсе жазса ошону гана алат калган местаны да толтуруп салбайт ALI
text  -- клиент канчалык узундукта текст жазарын билбесек анда биз текстти колдонобуз варчарды колдонсок анда клиент озунун оюн толук билдире албй калат

date -- бул жыл, ай, кун сактайт
Time -- саат, минута, секунданы сактайт
datetime -- бул экоосун чогуу сактайт 


        таблица ачуу:
        
create Table таблицааты(full_name varchar(30), city varchar(30), phone_number int)  бул таблица озуно атын шаарын телефон номерин алат

Insert into Person(full_name, city, phone_number) 
values('Bektur Sadykov', 'Bishkek', 0777788899)         #бул маалымат кошуу


as атын озгортсо болот
distinc   окшоштордун бироосун чыгараи

'''

'''
ls              -- кандай папка бар экенин коруу
dir             -- папкада кандай файл бар экенин коруу
ls -a           -- скрытые файлы, невидимый папканы коруу
ls папкааты     -- ошол папкада эмне бар экенин коруу, папка жонундо информация
cd папкааты     -- папкага кируу
mkdir папкааты  -- создание папки, папка ачуу
ni имя.txt      -- файл ачуу
cat имя.txt     -- ичинде эмне жазылганын коруу, просмотр файла
ren имя.txt  имя.txt  -- файлдын атын озгортуу, переименовать файл
cls             -- чистка, очуруу
clear           -- историяны тазалап коет
history         -- историяны чыгарат, комп жангандан баштап терминалдагы нерселер
cd..            -- арткы папкага чыгуу, кайтуу
cp имя.txt  имяфайла  -- копирование
mv file1 file4  -- перемещение файла
rmdir имяФайла  -- удаление папки
rm   имяФайла   -- удаление файла
mkdir имяФайла  -- создавать папки
del             -- удалить файл 
'''

